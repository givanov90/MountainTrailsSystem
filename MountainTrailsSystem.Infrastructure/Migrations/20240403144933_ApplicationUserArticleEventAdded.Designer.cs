// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MountainTrailsSystem.Infrastructure.Data;

#nullable disable

namespace MountainTrailsSystem.Infrastructure.Migrations
{
    [DbContext(typeof(MountainTrailsSystemDbContext))]
    [Migration("20240403144933_ApplicationUserArticleEventAdded")]
    partial class ApplicationUserArticleEventAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MountainTrailsSystem.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MountainTrailsSystem.Infrastructure.Data.Models.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Article identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleId"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasComment("Article description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Image URL of the article");

                    b.Property<DateTime>("PublishedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the article is published");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Article title");

                    b.HasKey("ArticleId");

                    b.ToTable("Articles");

                    b.HasComment("News article entity");
                });

            modelBuilder.Entity("MountainTrailsSystem.Infrastructure.Data.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Event identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)")
                        .HasComment("Event description");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the event ends");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the event starts");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Event title");

                    b.HasKey("EventId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Events");

                    b.HasComment("Event entity");
                });

            modelBuilder.Entity("MountainTrailsSystem.Infrastructure.Data.Models.Mountain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mountain identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Mountain name");

                    b.HasKey("Id");

                    b.ToTable("Mountains");

                    b.HasComment("Mountain entity");
                });

            modelBuilder.Entity("MountainTrailsSystem.Infrastructure.Data.Models.MountainRegion", b =>
                {
                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasComment("Region identifier");

                    b.Property<int?>("MountainId")
                        .HasColumnType("int")
                        .HasComment("Mountain identifier");

                    b.HasKey("RegionId", "MountainId");

                    b.HasIndex("MountainId");

                    b.ToTable("MountainsRegions");

                    b.HasComment("Connection between mountain and region entities");
                });

            modelBuilder.Entity("MountainTrailsSystem.Infrastructure.Data.Models.Peak", b =>
                {
                    b.Property<int>("PeakId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Peak identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PeakId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Peak description");

                    b.Property<int>("Elevation")
                        .HasColumnType("int")
                        .HasComment("Peak elevation");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Image URL of the peak");

                    b.Property<int>("MountainId")
                        .HasColumnType("int")
                        .HasComment("Mountain identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Peak name");

                    b.HasKey("PeakId");

                    b.HasIndex("MountainId");

                    b.ToTable("Peaks");

                    b.HasComment("Mountain peak");
                });

            modelBuilder.Entity("MountainTrailsSystem.Infrastructure.Data.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Region identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Region name");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");

                    b.HasComment("Region entity");
                });

            modelBuilder.Entity("MountainTrailsSystem.Infrastructure.Data.Models.Trail", b =>
                {
                    b.Property<int>("TrailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Trail identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrailId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("Trail description");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int")
                        .HasComment("Difficulty level of the trail");

                    b.Property<double>("Distance")
                        .HasColumnType("float")
                        .HasComment("Distance of the trail");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time")
                        .HasComment("Duration of the trail");

                    b.Property<int>("ElevationGain")
                        .HasColumnType("int")
                        .HasComment("Elevation gained on the trail");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Image URL of the trail");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time of last update of the trail's actual state");

                    b.Property<int>("MountainId")
                        .HasColumnType("int")
                        .HasComment("Mountain identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Trail name");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasComment("Rating of the trail");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasComment("Region identifier");

                    b.HasKey("TrailId");

                    b.HasIndex("MountainId");

                    b.HasIndex("RegionId");

                    b.ToTable("Trails");

                    b.HasComment("Mountain trail");
                });

            modelBuilder.Entity("MountainTrailsSystem.Infrastructure.Data.Models.TrailPeak", b =>
                {
                    b.Property<int>("TrailId")
                        .HasColumnType("int")
                        .HasComment("Trail identifier");

                    b.Property<int?>("PeakId")
                        .HasColumnType("int")
                        .HasComment("Peak identifier");

                    b.HasKey("TrailId", "PeakId");

                    b.HasIndex("PeakId");

                    b.ToTable("TrailsPeaks");

                    b.HasComment("Connection between trail and peak entities");
                });

            modelBuilder.Entity("MountainTrailsSystem.Infrastructure.Data.Models.TrailStatusNote", b =>
                {
                    b.Property<int>("TrailStatusNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("TrailStatusNote identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrailStatusNoteId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Description of the updated trail status");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Image verifying the updated trail status");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit")
                        .HasComment("Flag showing if the given note is resolved");

                    b.Property<int>("TrailId")
                        .HasColumnType("int")
                        .HasComment("Trail identifier");

                    b.HasKey("TrailStatusNoteId");

                    b.HasIndex("TrailId");

                    b.ToTable("TrailStatusNotes");

                    b.HasComment("Request for update of the trail status");
                });

            modelBuilder.Entity("MountainTrailsSystem.Infrastructure.Data.Models.UserTrail", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.Property<int>("TrailId")
                        .HasColumnType("int")
                        .HasComment("Trail identifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "TrailId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("TrailId");

                    b.ToTable("UsersTrails");

                    b.HasComment("Connection between ApplicationUser and Trail entities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MountainTrailsSystem.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MountainTrailsSystem.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MountainTrailsSystem.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MountainTrailsSystem.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MountainTrailsSystem.Infrastructure.Data.Models.Event", b =>
                {
                    b.HasOne("MountainTrailsSystem.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany("EventsToAttend")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("MountainTrailsSystem.Infrastructure.Data.Models.MountainRegion", b =>
                {
                    b.HasOne("MountainTrailsSystem.Infrastructure.Data.Models.Mountain", "Mountain")
                        .WithMany("Regions")
                        .HasForeignKey("MountainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MountainTrailsSystem.Infrastructure.Data.Models.Region", "Region")
                        .WithMany("Mountains")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Mountain");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("MountainTrailsSystem.Infrastructure.Data.Models.Peak", b =>
                {
                    b.HasOne("MountainTrailsSystem.Infrastructure.Data.Models.Mountain", "Mountain")
                        .WithMany("Peaks")
                        .HasForeignKey("MountainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mountain");
                });

            modelBuilder.Entity("MountainTrailsSystem.Infrastructure.Data.Models.Trail", b =>
                {
                    b.HasOne("MountainTrailsSystem.Infrastructure.Data.Models.Mountain", "Mountain")
                        .WithMany("Trails")
                        .HasForeignKey("MountainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MountainTrailsSystem.Infrastructure.Data.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Mountain");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("MountainTrailsSystem.Infrastructure.Data.Models.TrailPeak", b =>
                {
                    b.HasOne("MountainTrailsSystem.Infrastructure.Data.Models.Peak", "Peak")
                        .WithMany("Trails")
                        .HasForeignKey("PeakId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MountainTrailsSystem.Infrastructure.Data.Models.Trail", "Trail")
                        .WithMany("Peaks")
                        .HasForeignKey("TrailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Peak");

                    b.Navigation("Trail");
                });

            modelBuilder.Entity("MountainTrailsSystem.Infrastructure.Data.Models.TrailStatusNote", b =>
                {
                    b.HasOne("MountainTrailsSystem.Infrastructure.Data.Models.Trail", "Trail")
                        .WithMany()
                        .HasForeignKey("TrailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trail");
                });

            modelBuilder.Entity("MountainTrailsSystem.Infrastructure.Data.Models.UserTrail", b =>
                {
                    b.HasOne("MountainTrailsSystem.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany("VisitedTrails")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("MountainTrailsSystem.Infrastructure.Data.Models.Trail", "Trail")
                        .WithMany()
                        .HasForeignKey("TrailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MountainTrailsSystem.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("SavedTrails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MountainTrailsSystem.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("EventsToAttend");

                    b.Navigation("SavedTrails");

                    b.Navigation("VisitedTrails");
                });

            modelBuilder.Entity("MountainTrailsSystem.Infrastructure.Data.Models.Mountain", b =>
                {
                    b.Navigation("Peaks");

                    b.Navigation("Regions");

                    b.Navigation("Trails");
                });

            modelBuilder.Entity("MountainTrailsSystem.Infrastructure.Data.Models.Peak", b =>
                {
                    b.Navigation("Trails");
                });

            modelBuilder.Entity("MountainTrailsSystem.Infrastructure.Data.Models.Region", b =>
                {
                    b.Navigation("Mountains");
                });

            modelBuilder.Entity("MountainTrailsSystem.Infrastructure.Data.Models.Trail", b =>
                {
                    b.Navigation("Peaks");
                });
#pragma warning restore 612, 618
        }
    }
}
